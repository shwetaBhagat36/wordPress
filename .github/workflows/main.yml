name: Deploy WordPress to LEMP Server

on:
  push:
    branches:
      - main  # Trigger the workflow on pushes to the main branch
  pull_request:
    branches:
      - main  # Trigger the workflow on pull requests to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest  # Use Ubuntu runner for the CI/CD job

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up SSH for secure connection to the server
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{secrets.SSH_PRIVATE_KEY}}  # Add your SSH private key in GitHub secre

  # Step 3: Add the server's host to known_hosts to avoid "Host key verification failed"
      - name: Add the server's host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H 52.201.236.98 >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # Step 4: Upload WordPress files to the server
      - name: Upload files to server
        run: |
          rsync -avz --exclude '.git' --exclude 'node_modules' --exclude 'wp-config.php' ./ ubuntu@52.201.236.98:/var/www/html/wordpress


      # Step 5: SSH to the server and restart Nginx and PHP-FPM
      - name: Restart Nginx and PHP-FPM on the server
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@52.201.236.98 << 'EOF'
            sudo systemctl restart nginx
            sudo systemctl restart php8.3-fpm  # Adjust PHP version if necessary
          EOF

      # Step 6: Optionally, use wp-cli to update the database if needed
      - name: Update WordPress Database (Optional)
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@52.201.236.98 << 'EOF'
            wp db migrate  # You can replace this with any wp-cli command if needed
          EOF

      # Step 7: Clear cache if using Redis or any caching system (optional)
      - name: Clear Cache (Optional)
        run: |
          ssh -o StrictHostKeyChecking=no username@52.201.236.98 << 'EOF'
            sudo systemctl restart redis  # Only if you're using Redis caching
          EOF
